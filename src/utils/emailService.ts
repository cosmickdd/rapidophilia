// Email Service - Sends booking emails to: rapidophiliatravel@gmail.com
// Multiple reliable methods to ensure emails are delivered

interface BookingData {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  participants: number;
  trekChoice: string;
  message: string;
  totalPrice: number;
  trekDate?: string;
}

export const sendBookingEmail = async (bookingData: BookingData): Promise<{ success: boolean; message: string }> => {
  console.log('üìß Processing booking request:', bookingData);
  
  try {
    // Method 1: Formsubmit.co (most reliable, no setup required)
    console.log('Trying Formsubmit.co...');
    const formsubmitResult = await sendViaFormsubmit(bookingData);
    if (formsubmitResult.success) {
      return formsubmitResult;
    }

    // Method 2: Netlify Forms (backup)
    console.log('Trying Netlify Forms...');
    const netlifyResult = await sendViaNetlify(bookingData);
    if (netlifyResult.success) {
      return netlifyResult;
    }

    // Method 3: Manual email (always works)
    console.log('Using manual email...');
    return generateManualEmail(bookingData);

  } catch (error) {
    console.error('Email sending failed:', error);
    return generateManualEmail(bookingData);
  }
};

// Method 1: Formsubmit.co - Most reliable free email service
const sendViaFormsubmit = async (bookingData: BookingData): Promise<{ success: boolean; message: string }> => {
  try {
    const formData = new FormData();
    
    // Configure Formsubmit settings with activated endpoint
    formData.append('_subject', `üèîÔ∏è URGENT: Trek Booking - ${bookingData.trekChoice}`);
    formData.append('_captcha', 'false');
    formData.append('_template', 'box');
    formData.append('_autoresponse', 'Thank you for your trek booking request! We will contact you within 24 hours.');
    
    // Redirect after submission (works for production)
    const currentDomain = window.location.origin;
    formData.append('_next', `${currentDomain}/booking-success`);
    
    // Booking details
    formData.append('customer_name', `${bookingData.firstName} ${bookingData.lastName}`);
    formData.append('customer_email', bookingData.email);
    formData.append('customer_phone', bookingData.phone);
    formData.append('trek_name', bookingData.trekChoice);
    formData.append('participants', bookingData.participants.toString());
    formData.append('total_price', `‚Çπ${bookingData.totalPrice.toLocaleString()}`);
    formData.append('customer_message', bookingData.message || 'No additional message');
    formData.append('booking_date', new Date().toLocaleString());
    formData.append('submitted_from', currentDomain);
    
    // Main message
    formData.append('message', `
üèîÔ∏è NEW TREK BOOKING REQUEST - URGENT!

üìã BOOKING DETAILS:
Trek: ${bookingData.trekChoice}
Participants: ${bookingData.participants}
Total Price: ‚Çπ${bookingData.totalPrice.toLocaleString()}

üë§ CUSTOMER DETAILS:
Name: ${bookingData.firstName} ${bookingData.lastName}
Email: ${bookingData.email}
Phone: ${bookingData.phone}

üí¨ CUSTOMER MESSAGE:
${bookingData.message || 'No additional message'}

üìÖ BOOKING SUBMITTED: ${new Date().toLocaleString()}
üåê SUBMITTED FROM: ${currentDomain}

‚ö° ACTION REQUIRED: Please contact customer within 24 hours to confirm booking!

Generated by Rapidophilia Booking System
    `);

    // Use the activated FormSubmit endpoint with your secure code
    const response = await fetch('https://formsubmit.co/0e6b8f1a6e05bc8083144148ba2ed03a', {
      method: 'POST',
      body: formData
    });

    if (response.ok) {
      console.log('‚úÖ Formsubmit.co success with activated endpoint');
      return {
        success: true,
        message: `‚úÖ Booking request sent successfully to rapidophiliatravel@gmail.com! You will receive email confirmation shortly. Booking ID: ${Date.now()}`
      };
    }
    
    throw new Error('Formsubmit.co failed');
  } catch (error) {
    console.error('Formsubmit.co error:', error);
    return { success: false, message: 'Formsubmit.co failed' };
  }
};

// Method 2: Netlify Forms (backup service)
const sendViaNetlify = async (bookingData: BookingData): Promise<{ success: boolean; message: string }> => {
  try {
    const formData = new FormData();
    formData.append('form-name', 'trek-booking');
    formData.append('name', `${bookingData.firstName} ${bookingData.lastName}`);
    formData.append('email', bookingData.email);
    formData.append('phone', bookingData.phone);
    formData.append('trek', bookingData.trekChoice);
    formData.append('participants', bookingData.participants.toString());
    formData.append('price', `‚Çπ${bookingData.totalPrice.toLocaleString()}`);
    formData.append('message', `
üèîÔ∏è Trek Booking: ${bookingData.trekChoice}

Customer: ${bookingData.firstName} ${bookingData.lastName}
Email: ${bookingData.email}
Phone: ${bookingData.phone}
Participants: ${bookingData.participants}
Price: ‚Çπ${bookingData.totalPrice.toLocaleString()}
Message: ${bookingData.message || 'None'}
Date: ${new Date().toLocaleString()}

Send to: rapidophiliatravel@gmail.com
    `);

    const response = await fetch('/', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams(formData as any).toString()
    });

    if (response.ok) {
      console.log('‚úÖ Netlify Forms success');
      return {
        success: true,
        message: `‚úÖ Booking request sent via Netlify to rapidophiliatravel@gmail.com!`
      };
    }
    
    throw new Error('Netlify Forms failed');
  } catch (error) {
    console.error('Netlify Forms error:', error);
    return { success: false, message: 'Netlify Forms failed' };
  }
};

// Method 3: Manual email (always works as fallback)
const generateManualEmail = (bookingData: BookingData): { success: boolean; message: string } => {
  try {
    const subject = `üèîÔ∏è URGENT: Trek Booking - ${bookingData.trekChoice}`;
    const body = `
Dear Rapidophilia Team,

üèîÔ∏è NEW TREK BOOKING REQUEST

üìã BOOKING DETAILS:
- Trek Name: ${bookingData.trekChoice}
- Number of Participants: ${bookingData.participants}
- Total Price: ‚Çπ${bookingData.totalPrice.toLocaleString()}

üë§ CUSTOMER INFORMATION:
- Name: ${bookingData.firstName} ${bookingData.lastName}
- Email: ${bookingData.email}
- Phone: ${bookingData.phone}

üí¨ CUSTOMER MESSAGE:
${bookingData.message || 'No additional requirements'}

üìÖ BOOKING SUBMITTED: ${new Date().toLocaleString()}

‚ö° URGENT: Please contact customer within 24 hours to confirm this booking!

This email was generated automatically by your booking system.

Best regards,
${bookingData.firstName} ${bookingData.lastName}
    `.trim();

    // Create mailto link
    const mailtoLink = `mailto:rapidophiliatravel@gmail.com?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    
    // Open email client
    window.open(mailtoLink, '_blank');
    
    console.log('‚úÖ Manual email opened');
    
    return {
      success: true,
      message: `üìß Email client opened with booking details for rapidophiliatravel@gmail.com. Please click SEND in your email client to complete the booking request.`
    };
  } catch (error) {
    console.error('Manual email error:', error);
    return {
      success: false,
      message: '‚ùå Unable to send email. Please contact us directly at rapidophiliatravel@gmail.com with your booking details.'
    };
  }
};

// Note: Service ID service_46hrck5 is saved for future EmailJS integration
// Current implementation uses free services that work immediately
