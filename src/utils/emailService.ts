// Email Service - Sends booking emails to: utkarsh2313003@akgec.ac.in
// Simple, reliable email service with multiple fallback methods

interface BookingData {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  participants: number;
  trekChoice: string;
  message: string;
  totalPrice: number;
  trekTitle?: string;
  trekDate?: string;
}

export const sendBookingEmail = async (bookingData: BookingData): Promise<{ success: boolean; message: string }> => {
  console.log('üìß Processing booking request:', bookingData);
  
  try {
    // Method 1: FormSubmit (most reliable)
    console.log('Trying FormSubmit...');
    const formsubmitResult = await sendViaFormSubmit(bookingData);
    if (formsubmitResult.success) {
      return formsubmitResult;
    }
    console.log('FormSubmit failed, trying backup...');

    // Method 2: Web3Forms (backup)
    console.log('Trying Web3Forms...');
    const web3Result = await sendViaWeb3Forms(bookingData);
    if (web3Result.success) {
      return web3Result;
    }
    console.log('Web3Forms failed, using manual email...');

    // Method 3: Manual email (always works)
    console.log('Using manual email...');
    return generateManualEmail(bookingData);

  } catch (error) {
    console.error('Email sending failed:', error);
    return {
      success: false,
      message: 'Failed to send email. Please try again or contact us directly.'
    };
  }
};

// Method 1: FormSubmit.co - Direct to your email
const sendViaFormSubmit = async (bookingData: BookingData): Promise<{ success: boolean; message: string }> => {
  try {
    const formData = new FormData();
    
    // FormSubmit configuration
    formData.append('_subject', `üèîÔ∏è Trek Booking: ${bookingData.trekChoice}`);
    formData.append('_captcha', 'false');
    formData.append('_template', 'box');
    formData.append('_autoresponse', 'Thank you for your trek booking! We will contact you within 24 hours.');
    
    // Booking details
    formData.append('customer_name', `${bookingData.firstName} ${bookingData.lastName}`);
    formData.append('customer_email', bookingData.email);
    formData.append('customer_phone', bookingData.phone);
    formData.append('trek_name', bookingData.trekChoice);
    formData.append('participants', bookingData.participants.toString());
    formData.append('total_price', `‚Çπ${bookingData.totalPrice.toLocaleString()}`);
    formData.append('customer_message', bookingData.message || 'No additional message');
    formData.append('booking_date', new Date().toLocaleString());
    
    // Main message
  formData.append('message', `
üèîÔ∏è NEW TREK BOOKING REQUEST

üìã BOOKING DETAILS:
Trek: ${bookingData.trekChoice}
Participants: ${bookingData.participants}
Total Price: ‚Çπ${bookingData.totalPrice.toLocaleString()}

üë§ CUSTOMER DETAILS:
Name: ${bookingData.firstName} ${bookingData.lastName}
Email: ${bookingData.email}
Phone: ${bookingData.phone}

üí¨ CUSTOMER MESSAGE:
${bookingData.message || 'No additional message'}

üçΩÔ∏è MEALS PROVIDED:
All meals and evening snacks provided: Day 1 (Friday) Dinner ‚Üí Day 3 (Sunday) Lunch

üìÖ BOOKING SUBMITTED: ${new Date().toLocaleString()}

‚ö° ACTION REQUIRED: Please contact customer within 24 hours!

Generated by Rapidophilia Booking System
  `);

    const response = await fetch('https://formsubmit.co/utkarsh2313003@akgec.ac.in', {
      method: 'POST',
      body: formData
    });

    if (response.ok) {
      console.log('‚úÖ FormSubmit success');
      return {
        success: true,
        message: `üèîÔ∏è Booking Request Submitted Successfully! Your trek booking has been sent to our team. We will contact you within 24 hours to confirm your adventure. Reference ID: ${Date.now()}`
      };
    }
    
    throw new Error('FormSubmit failed');
  } catch (error) {
    console.error('FormSubmit error:', error);
    return { success: false, message: 'FormSubmit failed' };
  }
};

// Method 2: Web3Forms (backup service)
const sendViaWeb3Forms = async (bookingData: BookingData): Promise<{ success: boolean; message: string }> => {
  try {
    const formData = new FormData();
    formData.append('access_key', '550e8400-e29b-41d4-a716-446655440000');
    formData.append('to', 'utkarsh2313003@akgec.ac.in');
    formData.append('from_name', `${bookingData.firstName} ${bookingData.lastName}`);
    formData.append('email', bookingData.email);
    formData.append('subject', `üèîÔ∏è Trek Booking: ${bookingData.trekChoice}`);
  formData.append('message', `
üèîÔ∏è NEW TREK BOOKING REQUEST

üìã BOOKING DETAILS:
Trek: ${bookingData.trekChoice}
Participants: ${bookingData.participants}
Total Price: ‚Çπ${bookingData.totalPrice.toLocaleString()}

üë§ CUSTOMER DETAILS:
Name: ${bookingData.firstName} ${bookingData.lastName}
Email: ${bookingData.email}
Phone: ${bookingData.phone}

üí¨ MESSAGE: ${bookingData.message || 'No additional message'}

üçΩÔ∏è MEALS PROVIDED:
All meals and evening snacks provided: Day 1 (Friday) Dinner ‚Üí Day 3 (Sunday) Lunch

üìÖ BOOKING TIME: ${new Date().toLocaleString()}

‚ö° Contact customer within 24 hours!
  `);

    const response = await fetch('https://api.web3forms.com/submit', {
      method: 'POST',
      body: formData
    });

    const result = await response.json();

    if (result.success) {
      console.log('‚úÖ Web3Forms success');
      return {
        success: true,
        message: `üèîÔ∏è Booking Request Submitted Successfully! Your trek booking has been sent to our team via backup service. Reference ID: ${Date.now()}`
      };
    }
    
    throw new Error('Web3Forms failed');
  } catch (error) {
    console.error('Web3Forms error:', error);
    return { success: false, message: 'Web3Forms failed' };
  }
};

// Method 3: Manual email (always works as fallback)
const generateManualEmail = (bookingData: BookingData): { success: boolean; message: string } => {
  try {
    const subject = `üèîÔ∏è Trek Booking: ${bookingData.trekChoice}`;
  const body = `
Dear Rapidophilia Team,

üèîÔ∏è NEW TREK BOOKING REQUEST

üìã BOOKING DETAILS:
- Trek Name: ${bookingData.trekChoice}
- Number of Participants: ${bookingData.participants}
- Total Price: ‚Çπ${bookingData.totalPrice.toLocaleString()}

üë§ CUSTOMER INFORMATION:
- Name: ${bookingData.firstName} ${bookingData.lastName}
- Email: ${bookingData.email}
- Phone: ${bookingData.phone}

üí¨ CUSTOMER MESSAGE:
${bookingData.message || 'No additional requirements'}

üçΩÔ∏è MEALS PROVIDED:
All meals and evening snacks provided: Day 1 (Friday) Dinner ‚Üí Day 3 (Sunday) Lunch

üìÖ BOOKING SUBMITTED: ${new Date().toLocaleString()}

‚ö° URGENT: Please contact customer within 24 hours to confirm this booking!

This email was generated automatically by your booking system.

Best regards,
${bookingData.firstName} ${bookingData.lastName}
  `.trim();

    // Create mailto link
    const mailtoLink = `mailto:utkarsh2313003@akgec.ac.in?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    
    // Open email client
    window.open(mailtoLink, '_blank');
    
    console.log('‚úÖ Manual email opened');
    
    return {
      success: true,
      message: `üìß Email client opened with booking details for utkarsh2313003@akgec.ac.in. Please click SEND to complete your booking request.`
    };
  } catch (error) {
    console.error('Manual email error:', error);
    return {
      success: false,
      message: '‚ö†Ô∏è Unable to send email. Please contact us directly at utkarsh2313003@akgec.ac.in with your booking details.'
    };
  }
};

// Clean, simple implementation - emails go to utkarsh2313003@akgec.ac.in
